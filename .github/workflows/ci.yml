name: CI

on:
  push:
  pull_request:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  STREAMLIT_SERVER_HEADLESS: "1"
  STREAMLIT_BROWSER_GATHER_USAGE_STATS: "false"
  PYTHONUNBUFFERED: "1"
  PYTEST_ADDOPTS: "--color=yes"
  TZ: "UTC"

jobs:
  lint:
    name: Lint / Format / Types
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', 'requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Ruff (lint)
        run: ruff check .
      - name: Black (format check)
        run: black --check --diff .
      - name: Mypy (type check)
        run: mypy .

  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', 'requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          python - <<'PY'
          import sys, platform, importlib
          print("Python:", sys.version)
          print("Platform:", platform.platform())
          for pkg in ["pandas","yfinance","streamlit","plotly","pytest","ruff","black","mypy"]:
              try:
                  m = importlib.import_module(pkg)
                  print(f"{pkg}: OK ({getattr(m,'__version__','?')})")
              except Exception as e:
                  print(f"{pkg}: FAIL -> {e}")
          PY

      - name: Smoke import app
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python - <<'PY'
          try:
              import app  # noqa: F401
              import os, inspect
              print("App import OK from:", os.path.dirname(inspect.getfile(app)))
          except Exception:
              import traceback
              traceback.print_exc()
              raise
          PY

      - name: Run tests (if any)
        if: ${{ hashFiles('tests/**/*.py') != '' }}
        env:
          PYTHONPATH: ${{ github.workspace }}
          STREAMLIT_SERVER_HEADLESS: "1"
          STREAMLIT_BROWSER_GATHER_USAGE_STATS: "false"
        run: |
          set -o pipefail
          pytest -vv -ra --maxfail=1 --disable-warnings --junitxml=pytest-report.xml | tee pytest-stdout.txt

      - name: Upload pytest report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logs
          path: |
            pytest-report.xml
            pytest-stdout.txt



